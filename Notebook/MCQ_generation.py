# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BzDZUe7xoLrtI9ai3xJV744eI-jrEUX5
"""

import spacy
import random
from collections import Counter

text ="""In the heart of the bustling city, hidden away from the main thoroughfares, lies a quaint little bookstore that has stood the test of time. The store, with its creaky wooden floors and towering bookshelves, is a treasure trove of literary wonders. Sunlight filters through the large, dusty windows, casting a warm glow on the myriad of books that line the shelves. From rare first editions to contemporary bestsellers, the store offers a diverse collection that caters to every reader's taste. The scent of old paper and ink fills the air, mingling with the faint aroma of freshly brewed coffee from the small café nestled in the corner. The owner, an elderly gentleman with a passion for stories, is always eager to recommend a good read or share anecdotes about the store's rich history. Regular patrons often gather around the cozy reading nooks, engaging in lively discussions about their favorite authors and literary theories. Despite the rise of digital media, the bookstore remains a beloved sanctuary for book lovers, a place where one can lose themselves in the pages of a captivating novel or discover a hidden gem among the stacks. The charm of the bookstore lies not just in its vast collection but in the sense of community and the love of literature that permeates every corner. The walls are adorned with vintage posters and photographs, each telling a story of a bygone era, adding to the nostalgic atmosphere. On weekends, the bookstore hosts various events, from book signings by local authors to poetry readings that attract literature enthusiasts from all over the city. Children gather for storytelling sessions, their eyes wide with wonder as they are transported to magical worlds. The bookstore’s resident cat, a lazy tabby named Whiskers, can often be found lounging on the window sill, basking in the afternoon sun. The sound of pages turning, the hushed whispers of conversation, and the occasional burst of laughter create a soothing symphony that makes the bookstore a haven for those seeking a respite from the chaotic pace of modern life. It is a place where time seems to stand still, and the simple pleasure of reading a good book is cherished above all else."""
num_question = 5

nlp = spacy.load("en_core_web_sm")

nlp(text)

doc = nlp(text)

[sent for sent in doc.sents]

len([sent for sent in doc.sents])

sentences = [sent.text for sent in doc.sents]

sentences

random_sample = random.sample(sentences,min(num_question,len(sentences)))
random_sample

mcqs = []
for sentence in random_sample:
    sentence = sentence.lower()
    sent_doc = nlp(sentence)
    print(f"sentences :{sentence}")
    nouns = [token.text for token in sent_doc if token.pos_ == "NOUN"]
    print(f"nouns:{nouns}")
    if(len(nouns)<2):
        continue

Counter(nouns)

if Counter(nouns):
    subject = Counter(nouns).most_common(1)[0][0]
    print(f"subject:{subject}")



def generate_mcqs(text, num_questions=5):
    doc = nlp(text)
    sentences = [sent.text for sent in doc.sents]
    selected_sentences = random.sample(sentences, min(num_questions, len(sentences)))
    mcqs = []
    for sentence in selected_sentences:
        sent_doc = nlp(sentence)
        nouns = [token.text for token in sent_doc if token.pos_ == "NOUN"]

        if len(nouns) < 2:
            continue

        noun_counts = Counter(nouns)
        # main subject ko space se replace kar do
        if noun_counts:
            subject = noun_counts.most_common(1)[0][0]
            question_stem = sentence.replace(subject, "_______")
            answer_choices = [subject]
            #  wrong answer ke liye
            for _ in range(3):
                distractor = random.choice(list(set(nouns) - set([subject])))
                answer_choices.append(distractor)

            random.shuffle(answer_choices)
            correct_answer = chr(64 + answer_choices.index(subject) + 1) # convewt word index to letter
            mcqs.append((question_stem, answer_choices, correct_answer))

    return mcqs

results = generate_mcqs(text,5)
results

for i, mcq in enumerate(results,start=1):
    question_stem, answer_choices, correct_answer = mcq
    print(f"Q{i}: {question_stem}")

for i, mcq in enumerate(results,start=1):
    question_stem, answer_choices, correct_answer = mcq
    print(f"Q{i}: {question_stem}")
    for j, choice  in enumerate(answer_choices, start=1):
        print(f"{chr(64+j)}: {choice}")
    print(f"Correct Answer: {correct_answer}")
    print("\n")

